name: Build, Scan, and Push to ECR

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    name: Build, Scan, and Push Docker Image
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1 
      ECR_REPO_NAME: java-ms-ecr-repo 

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v3

      - name: Checkout main branch from GitLab repo
        run: |
          git clone --branch master https://gitlab.com/cloud-devops-assignments/spring-boot-react-example gitlab-repo

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Build application
        run: |
          cd gitlab-repo
          mvn clean install

      - name: Install Snyk CLI
        run: |
          npm install -g snyk

      - name: Run Snyk scan
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          cd gitlab-repo
          snyk test --maven-aggregate-project || echo "Snyk scan completed with vulnerabilities"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 

      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag Docker image
        # env:
        #   BRANCH_NAME: ${{ github.event.inputs.target_branch }}
        run: |
          pwd
          ls
          cd gitlab-repo
          docker build -t ${{ secrets.ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:${{ github.run_number}} -f ../services/java/Dockerfile .


      - name: Push Docker image to ECR
        # env:
        #   IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker push ${{ secrets.ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPO_NAME:${{ github.run_number}}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      - name: Install Terragrunt
        run: |
          curl -L https://github.com/gruntwork-io/terragrunt/releases/download/v0.51.3/terragrunt_linux_amd64 -o /usr/local/bin/terragrunt
          chmod +x /usr/local/bin/terragrunt

      - name: Run Terragrunt init
        working-directory: ./services/java/dev 
        run: terragrunt init

      - name: Run Terragrunt init
        working-directory: ./services/java/dev 
        run: terragrunt plan

      - name: Run Terragrunt Apply
        working-directory: ./services/java/dev 
        run: terragrunt apply --auto-approve


